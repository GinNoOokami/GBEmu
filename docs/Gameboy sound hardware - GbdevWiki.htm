<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" dir="ltr" lang="en"><head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta http-equiv="Content-Style-Type" content="text/css">
		<meta name="generator" content="MediaWiki 1.15.1">
		<meta name="keywords" content="Gameboy sound hardware">
		<link rel="shortcut icon" href="http://gbdev.gg8.se/favicon.ico">
		<link rel="search" type="application/opensearchdescription+xml" href="http://gbdev.gg8.se/wiki/opensearch_desc.php" title="GbdevWiki (en)">
		<link rel="alternate" type="application/rss+xml" title="GbdevWiki RSS Feed" href="http://gbdev.gg8.se/wiki/index.php?title=Special:RecentChanges&amp;feed=rss">
		<link rel="alternate" type="application/atom+xml" title="GbdevWiki Atom Feed" href="http://gbdev.gg8.se/wiki/index.php?title=Special:RecentChanges&amp;feed=atom">
		<title>Gameboy sound hardware - GbdevWiki</title>
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/shared.css" type="text/css" media="screen">
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/commonPrint.css" type="text/css" media="print">
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/main.css" type="text/css" media="screen">
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/wiki/skins/monobook/IE50Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/wiki/skins/monobook/IE55Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/wiki/skins/monobook/IE60Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/wiki/skins/monobook/IE70Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/index_002.css" type="text/css">
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/index.css" type="text/css" media="print">
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/index_003.css" type="text/css">
		<link rel="stylesheet" href="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/index_004.css" type="text/css">
		<!--[if lt IE 7]><script type="text/javascript" src="/wiki/skins/common/IEFixes.js?207"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type="text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/wiki/skins";
		var wgArticlePath = "/wiki/articles/$1";
		var wgScriptPath = "/wiki";
		var wgScript = "/wiki/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://gbdev.gg8.se";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Gameboy_sound_hardware";
		var wgTitle = "Gameboy sound hardware";
		var wgAction = "view";
		var wgArticleId = "36";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 128;
		var wgVersion = "1.15.1";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/wikibits.js"><!-- wikibits js --></script><style type="text/css">@import "/wiki/skins/monobook/FF2Fixes.css";</style>
		<!-- Head Scripts -->
		<script type="text/javascript" src="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/ajax.js"></script>
		<script type="text/javascript" src="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/index.php"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Gameboy_sound_hardware skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Gameboy sound hardware</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From GbdevWiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>This documents the behavior of Game Boy sound; details which 
aren't relevant to the observable behavior have been omitted unless they
 clarify understanding. It is aimed at answering all questions about 
exact operation, rather than describing how to use sound effectively in 
Game Boy programs. Values in hexadecimal (base 16) are generally written
 with a $ prefix. Bits are numbered from 0 to 7, where bit N has a 
weight of 2^N. A nibble is 4 bits, half a byte. Obscure behavior is 
described separately to increase clarity elsewhere.
</p>
<table id="toc" class="toc" summary="Contents"><tbody><tr><td><div id="toctitle"><h2>Contents</h2> <span class="toctoggle">[<a href="javascript:toggleToc()" class="internal" id="togglelink">hide</a>]</span></div>
<ul>
<li class="toclevel-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1"><a href="#Registers"><span class="tocnumber">2</span> <span class="toctext">Registers</span></a></li>
<li class="toclevel-1"><a href="#Channels"><span class="tocnumber">3</span> <span class="toctext">Channels</span></a></li>
<li class="toclevel-1"><a href="#Timer"><span class="tocnumber">4</span> <span class="toctext">Timer</span></a></li>
<li class="toclevel-1"><a href="#Frame_Sequencer"><span class="tocnumber">5</span> <span class="toctext">Frame Sequencer</span></a></li>
<li class="toclevel-1"><a href="#Length_Counter"><span class="tocnumber">6</span> <span class="toctext">Length Counter</span></a></li>
<li class="toclevel-1"><a href="#Volume_Envelope"><span class="tocnumber">7</span> <span class="toctext">Volume Envelope</span></a></li>
<li class="toclevel-1"><a href="#Square_Wave"><span class="tocnumber">8</span> <span class="toctext">Square Wave</span></a></li>
<li class="toclevel-1"><a href="#Frequency_Sweep"><span class="tocnumber">9</span> <span class="toctext">Frequency Sweep</span></a></li>
<li class="toclevel-1"><a href="#Noise_Channel"><span class="tocnumber">10</span> <span class="toctext">Noise Channel</span></a></li>
<li class="toclevel-1"><a href="#Wave_Channel"><span class="tocnumber">11</span> <span class="toctext">Wave Channel</span></a></li>
<li class="toclevel-1"><a href="#Trigger_Event"><span class="tocnumber">12</span> <span class="toctext">Trigger Event</span></a></li>
<li class="toclevel-1"><a href="#Channel_DAC"><span class="tocnumber">13</span> <span class="toctext">Channel DAC</span></a></li>
<li class="toclevel-1"><a href="#Mixer"><span class="tocnumber">14</span> <span class="toctext">Mixer</span></a></li>
<li class="toclevel-1"><a href="#Power_Control"><span class="tocnumber">15</span> <span class="toctext">Power Control</span></a></li>
<li class="toclevel-1"><a href="#Register_Reading"><span class="tocnumber">16</span> <span class="toctext">Register Reading</span></a></li>
<li class="toclevel-1"><a href="#Vin_Mixing"><span class="tocnumber">17</span> <span class="toctext">Vin Mixing</span></a></li>
<li class="toclevel-1"><a href="#Obscure_Behavior"><span class="tocnumber">18</span> <span class="toctext">Obscure Behavior</span></a></li>
<li class="toclevel-1"><a href="#Differences"><span class="tocnumber">19</span> <span class="toctext">Differences</span></a></li>
<li class="toclevel-1"><a href="#To_Do"><span class="tocnumber">20</span> <span class="toctext">To Do</span></a></li>
<li class="toclevel-1"><a href="#Thanks"><span class="tocnumber">21</span> <span class="toctext">Thanks</span></a></li>
</ul>
</td></tr></tbody></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Overview" id="Overview"></a><h1> <span class="mw-headline"> Overview </span></h1>
<p>The Game Boy has four sound channels: two square waves with 
adjustable duty, a programmable wave table, and a noise generator. Each 
has some kind of frequency (pitch) control. The first square channel 
also has an automatic frequency sweep unit to help with sound effects. 
The squares and noise each have a volume envelope unit to help with 
fading notes and sound effects, while the wave channel has only limited 
manual volume control. Each channel has a length counter that can 
silence the channel after a preset time, to handle note durations. Each 
channel can be individually panned to the far left, center, or far 
right. The master volume of the left and right outputs can also be 
adjusted.
</p><p>Different versions of the Game Boy sound hardware have slightly different behavior. The following models have been tested:
</p>
<ul><li> DMG-CPU-03    original Game Boy
</li><li> DMG-CPU-05
</li><li> DMG-CPU-06
</li><li> MGB-LCPU-01   Game Boy Pocket
</li><li> CGB-CPU-02    Game Boy Color
</li><li> CGB-CPU-04
</li><li> CGB-CPU-05
</li></ul>
<a name="Registers" id="Registers"></a><h1> <span class="mw-headline"> Registers </span></h1>
<p>Sound registers are mapped to $FF10-$FF3F in memory. Each channel has
 five logical registers, NRx0-NRx4, though some don't use NRx0. The 
value written to bits marked with '-' has no effect. Reference to the 
value in a register means the last value written to it.
</p>
<pre>Name Addr 7654 3210 Function
-----------------------------------------------------------------
       Square 1
NR10 FF10 -PPP NSSS Sweep period, negate, shift
NR11 FF11 DDLL LLLL Duty, Length load (64-L)
NR12 FF12 VVVV APPP Starting volume, Envelope add mode, period
NR13 FF13 FFFF FFFF Frequency LSB
NR14 FF14 TL-- -FFF Trigger, Length enable, Frequency MSB

       Square 2
     FF15 ---- ---- Not used
NR21 FF16 DDLL LLLL Duty, Length load (64-L)
NR22 FF17 VVVV APPP Starting volume, Envelope add mode, period
NR23 FF18 FFFF FFFF Frequency LSB
NR24 FF19 TL-- -FFF Trigger, Length enable, Frequency MSB

       Wave
NR30 FF1A E--- ---- DAC power
NR31 FF1B LLLL LLLL Length load (256-L)
NR32 FF1C -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)
NR33 FF1D FFFF FFFF Frequency LSB
NR34 FF1E TL-- -FFF Trigger, Length enable, Frequency MSB

       Noise
     FF1F ---- ---- Not used
NR41 FF20 --LL LLLL Length load (64-L)
NR42 FF21 VVVV APPP Starting volume, Envelope add mode, period
NR43 FF22 SSSS WDDD Clock shift, Width mode of LFSR, Divisor code
NR44 FF23 TL-- ---- Trigger, Length enable

       Control/Status
NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol
NR51 FF25 NW21 NW21 Left enables, Right enables
NR52 FF26 P--- NW21 Power control/status, Channel length statuses

       Not used
     FF27 ---- ----
     .... ---- ----
     FF2F ---- ----

       Wave Table
     FF30 0000 1111 Samples 0 and 1
     ....
     FF3F 0000 1111 Samples 30 and 31
</pre>
<a name="Channels" id="Channels"></a><h1> <span class="mw-headline"> Channels </span></h1>
<p>Each channel has a frequency timer which clocks a waveform generator.
 The waveform's volume is adjusted and fed to the mixer. The mixer 
converts each channel's waveform into an electrical signal and outputs 
this to the left and/or right channels. Finally, a master volume control
 adjusts the left and right outputs. The channels have the following 
units that are connected from left to right:
</p>
<pre>Square 1: Sweep -&gt; Timer -&gt; Duty -&gt; Length Counter -&gt; Envelope -&gt; Mixer

Square 2:          Timer -&gt; Duty -&gt; Length Counter -&gt; Envelope -&gt; Mixer

Wave:              Timer -&gt; Wave -&gt; Length Counter -&gt; Volume   -&gt; Mixer

Noise:             Timer -&gt; LFSR -&gt; Length Counter -&gt; Envelope -&gt; Mixer
</pre>
<p>The mixer has a separate DAC for each channel, followed by on/off 
controls for left and right outputs. The left/right outputs from each 
channel are then added together and fed to the left/right master volume 
controls.
</p><p>In general, all units in the channels are always running. For 
example, even if a channel is silent, several units will still be 
calculating values even though they aren't used.
</p>
<a name="Timer" id="Timer"></a><h1> <span class="mw-headline"> Timer </span></h1>
<p>A timer generates an output clock every N input clocks, where N is 
the timer's period. If a timer's rate is given as a frequency, its 
period is 4194304/frequency in Hz. Each timer has an internal counter 
that is decremented on each input clock. When the counter becomes zero, 
it is reloaded with the period and an output clock is generated.
</p>
<a name="Frame_Sequencer" id="Frame_Sequencer"></a><h1> <span class="mw-headline"> Frame Sequencer </span></h1>
<p>The frame sequencer generates low frequency clocks for the modulation units. It is clocked by a 512 Hz timer.
</p>
<pre>Step   Length Ctr  Vol Env     Sweep
---------------------------------------
0      Clock       -           -
1      -           -           -
2      Clock       -           Clock
3      -           -           -
4      Clock       -           -
5      -           -           -
6      Clock       -           Clock
7      -           Clock       -
---------------------------------------
Rate   256 Hz      64 Hz       128 Hz
</pre>
<a name="Length_Counter" id="Length_Counter"></a><h1> <span class="mw-headline"> Length Counter </span></h1>
<p>A length counter disables a channel when it decrements to zero. It 
contains an internal counter and enabled flag. Writing a byte to NRx1 
loads the counter with 64-data (256-data for wave channel). The counter 
can be reloaded at any time.
</p><p>A channel is said to be disabled when the internal enabled flag 
is clear. When a channel is disabled, its volume unit receives 0, 
otherwise its volume unit receives the output of the waveform generator.
 Other units besides the length counter can enable/disable the channel 
as well.
</p><p>Each length counter is clocked at 256 Hz by the frame sequencer. 
When clocked while enabled by NRx4 and the counter is not zero, it is 
decremented. If it becomes zero, the channel is disabled.
</p>
<a name="Volume_Envelope" id="Volume_Envelope"></a><h1> <span class="mw-headline"> Volume Envelope </span></h1>
<p>A volume envelope has a volume counter and an internal timer clocked 
at 64 Hz by the frame sequencer. When the timer generates a clock and 
the envelope period is not zero, a new volume is calculated by adding or
 subtracting (as set by NRx2) one from the current volume. If this new 
volume within the 0 to 15 range, the volume is updated, otherwise it is 
left unchanged and no further automatic increments/decrements are made 
to the volume until the channel is triggered again.
</p><p>When the waveform input is zero the envelope outputs zero, otherwise it outputs the current volume.
</p><p>Writing to NRx2 causes obscure effects on the volume that differ on different Game Boy models (see obscure behavior).
</p>
<a name="Square_Wave" id="Square_Wave"></a><h1> <span class="mw-headline"> Square Wave </span></h1>
<p>A square channel's frequency timer period is set to 
(2048-frequency)*4. Four duty cycles are available, each waveform taking
 8 frequency timer clocks to cycle through:
</p>
<pre>Duty   Waveform    Ratio
-------------------------
0      00000001    12.5%
1      10000001    25%
2      10000111    50%
3      01111110    75%
</pre>
<a name="Frequency_Sweep" id="Frequency_Sweep"></a><h1> <span class="mw-headline"> Frequency Sweep </span></h1>
<p>The first square channel has a frequency sweep unit, controlled by 
NR10. This has a timer, internal enabled flag, and frequency shadow 
register. It can periodically adjust square 1's frequency up or down.
</p><p>During a trigger event, several things occur:
</p>
<ul><li> Square 1's frequency is copied to the shadow register.
</li><li> The sweep timer is reloaded.
</li><li> The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.
</li><li> If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.
</li></ul>
<p>Frequency calculation consists of taking the value in the frequency 
shadow register, shifting it right by sweep shift, optionally negating 
the value, and summing this with the frequency shadow register to 
produce a new frequency. What is done with this new frequency depends on
 the context.
</p><p>The overflow check simply calculates the new frequency and if this is greater than 2047, square 1 is disabled.
</p><p>The sweep timer is clocked at 128 Hz by the frame sequencer. When
 it generates a clock and the sweep's internal enabled flag is set and 
the sweep period is not zero, a new frequency is calculated and the 
overflow check is performed. If the new frequency is 2047 or less and 
the sweep shift is not zero, this new frequency is written back to the 
shadow frequency and square 1's frequency in NR13 and NR14, then 
frequency calculation and overflow check are run AGAIN immediately using
 this new value, but this second new frequency is not written back.
</p><p>Square 1's frequency can be modified via NR13 and NR14 while 
sweep is active, but the shadow frequency won't be affected so the next 
time the sweep updates the channel's frequency this modification will be
 lost.
</p>
<a name="Noise_Channel" id="Noise_Channel"></a><h1> <span class="mw-headline"> Noise Channel </span></h1>
<p>The noise channel's frequency timer period is set by a base divisor shifted left some number of bits.
</p>
<pre>Divisor code   Divisor
-----------------------
   0             8
   1            16
   2            32
   3            48
   4            64
   5            80
   6            96
   7           112
</pre>
<p>The linear feedback shift register (LFSR) generates a pseudo-random 
bit sequence. It has a 15-bit shift register with feedback. When clocked
 by the frequency timer, the low two bits (0 and 1) are XORed, all bits 
are shifted right by one, and the result of the XOR is put into the 
now-empty high bit. If width mode is 1 (NR43), the XOR result is ALSO 
put into bit 6 AFTER the shift, resulting in a 7-bit LFSR. The waveform 
output is bit 0 of the LFSR, INVERTED.
</p>
<a name="Wave_Channel" id="Wave_Channel"></a><h1> <span class="mw-headline"> Wave Channel </span></h1>
<p>The wave channel plays a 32-entry wave table made up of 4-bit 
samples. Each byte encodes two samples, the first in the high bits. The 
wave channel has a sample buffer and position counter. 
</p><p>The wave channel's frequency timer period is set to 
(2048-frequency)*2. When the timer generates a clock, the position 
counter is advanced one sample in the wave table, looping back to the 
beginning when it goes past the end, then a sample is read into the 
sample buffer from this NEW position.
</p><p>The DAC receives the current value from the upper/lower nibble of the sample buffer, shifted right by the volume control.
</p>
<pre>Code   Shift   Volume
-----------------------
0      4         0% (silent)
1      0       100%
2      1        50%
3      2        25%
</pre>
<p>Wave RAM can only be properly accessed when the channel is disabled (see obscure behavior).
</p>
<a name="Trigger_Event" id="Trigger_Event"></a><h1> <span class="mw-headline"> Trigger Event </span></h1>
<p>Writing a value to NRx4 with bit 7 set causes the following things to occur:
</p>
<ul><li> Channel is enabled (see length counter).
</li><li> If length counter is zero, it is set to 64 (256 for wave channel).
</li><li> Frequency timer is reloaded with period.
</li><li> Volume envelope timer is reloaded with period.
</li><li> Channel volume is reloaded from NRx2.
</li><li> Noise channel's LFSR bits are all set to 1.
</li><li> Wave channel's position is set to 0 but sample buffer is NOT refilled.
</li><li> Square 1's sweep does several things (see frequency sweep).
</li></ul>
<p>Note that if the channel's DAC is off, after the above actions occur the channel will be immediately disabled again.
</p>
<a name="Channel_DAC" id="Channel_DAC"></a><h1> <span class="mw-headline"> Channel DAC </span></h1>
<p>Each channel has a 4-bit digital-to-analog convertor (DAC). This 
converts the input value to a proportional output voltage. An input of 0
 generates -1.0 and an input of 15 generates +1.0, using arbitrary 
voltage units.
</p><p>DAC power is controlled by the upper 5 bits of NRx2 (top bit of 
NR30 for wave channel). If these bits are not all clear, the DAC is on, 
otherwise it's off and outputs 0 volts. Also, any time the DAC is off 
the channel is kept disabled (but turning the DAC back on does NOT 
enable the channel).
</p>
<a name="Mixer" id="Mixer"></a><h1> <span class="mw-headline"> Mixer </span></h1>
<p>Each channel's DAC output goes to a pair of on/off switches for the 
left and right channels before they are sent to the left/right mixers. A
 mixer simply adds the voltages from each channel together. These 
left/right switches are controlled by NR51. When a switch is off, the 
mixer receives 0 volts.
</p><p>The Vin bits of NR50 control mixing of the Vin signal from the cartridge, allowing extra sound hardware.
</p><p>The mixed left/right signals go to the left/right master volume 
controls. These multiply the signal by (volume+1). The volume step 
relative to the channel DAC is such that a single channel enabled via 
NR51 playing at volume of 2 with a master volume of 7 is about as loud 
as that channel playing at volume 15 with a master volume of 0.
</p>
<a name="Power_Control" id="Power_Control"></a><h1> <span class="mw-headline"> Power Control </span></h1>
<p>NR52 controls power to the sound hardware. When powered off, all 
registers (NR10-NR51) are instantly written with zero and any writes to 
those registers are ignored while power remains off (except on the DMG, 
where length counters are unaffected by power and can still be written 
while off). When powered on, the frame sequencer is reset so that the 
next step will be 0, the square duty units are reset to the first step 
of the waveform, and the wave channel's sample buffer is reset to 0.
</p><p>Power state does not affect wave memory, which can always be 
read/written. It also does not affect the 512 Hz timer that feeds the 
frame sequencer.
</p><p>When the Game Boy is switched on (before the internal boot ROM 
executes), the values in the wave table depend on the model. On the DMG,
 they are somewhat random, though the particular pattern is generally 
the same for each individual Game Boy unit. The game R-Type doesn't 
initialize wave RAM and thus relies on these. One set of values is
</p>
<pre>84 40 43 AA 2D 78 92 3C 60 59 59 B0 34 B8 2E DA
</pre>
<p>On the Game Boy Color, the values are consistently
</p>
<pre>00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF 00 FF
</pre>
<a name="Register_Reading" id="Register_Reading"></a><h1> <span class="mw-headline"> Register Reading </span></h1>
<p>Reading NR52 yields the current power status and each channel's enabled status (from the length counter).
</p><p>Wave RAM reads back as the last value written.
</p><p>When an NRxx register is read back, the last written value ORed with the following is returned:
</p>
<pre>     NRx0 NRx1 NRx2 NRx3 NRx4
    ---------------------------
NR1x  $80  $3F $00  $FF  $BF 
NR2x  $FF  $3F $00  $FF  $BF 
NR3x  $7F  $FF $9F  $FF  $BF 
NR4x  $FF  $FF $00  $00  $BF 
NR5x  $00  $00 $70

$FF27-$FF2F always read back as $FF
</pre>
<p>That is, the channel length counters, frequencies, and unused bits always read back as set to all 1s.
</p>
<a name="Vin_Mixing" id="Vin_Mixing"></a><h1> <span class="mw-headline"> Vin Mixing </span></h1>
<p>The cartridge connector includes a sound input called Vin. When 
enabled via NR50, it is mixed in before the master volume controls. On 
the DMG and MGB, 0.847 volts gives equivalent to 0 on a channel DAC, and
 3.710 volts is equivalent to 15 on a DAC, with other values linearly 
distributed between those voltages. On the CGB, the range is 1.920 volts
 to 2.740 volts, a quarter of the DMG range, thus sound fed to the CGB's
 Vin is significantly louder. When nothing is connected to Vin, it 
naturally floats at the middle voltage (silence).
</p>
<a name="Obscure_Behavior" id="Obscure_Behavior"></a><h1> <span class="mw-headline"> Obscure Behavior </span></h1>
<ul><li> The volume envelope and sweep timers treat a period of 0 as 8.
</li></ul>
<ul><li> Just after powering on, the first duty step of the square waves
 after they are triggered for the first time is played as if it were 0. 
Also, the square duty sequence clocking is disabled until the first 
trigger.
</li></ul>
<ul><li> When triggering the wave channel, the first sample to play is 
the previous one still in the high nibble of the sample buffer, and the 
next sample is the second nibble from the wave table. This is because it
 doesn't load the first byte on trigger like it "should". The first 
nibble from the wave table is thus not played until the waveform loops.
</li></ul>
<ul><li> When triggering a square channel, the low two bits of the frequency timer are NOT modified.
</li></ul>
<ul><li> Extra length clocking occurs when writing to NRx4 when the 
frame sequencer's next step is one that doesn't clock the length 
counter. In this case, if the length counter was PREVIOUSLY disabled and
 now enabled and the length counter is not zero, it is decremented. If 
this decrement makes it zero and trigger is clear, the channel is 
disabled. On the CGB-02, the length counter only has to have been 
disabled before; the current length enable state doesn't matter. This 
breaks at least one game (Prehistorik Man), and was fixed on CGB-04 and 
CGB-05.
</li></ul>
<ul><li> If a channel is triggered when the frame sequencer's next step 
is one that doesn't clock the length counter and the length counter is 
now enabled and length is being set to 64 (256 for wave channel) because
 it was previously zero, it is set to 63 instead (255 for wave channel).
</li></ul>
<ul><li> If a channel is triggered when the frame sequencer's next step 
will clock the volume envelope, the envelope's timer is reloaded with 
one greater than it would have been.
</li></ul>
<ul><li> Using a noise channel clock shift of 14 or 15 results in the LFSR receiving no clocks.
</li></ul>
<ul><li> Clearing the sweep negate mode bit in NR10 after at least one 
sweep calculation has been made using the negate mode since the last 
trigger causes the channel to be immediately disabled. This prevents you
 from having the sweep lower the frequency then raise the frequency 
without a trigger inbetween.
</li></ul>
<ul><li> If the wave channel is enabled, accessing any byte from 
$FF30-$FF3F is equivalent to accessing the current byte selected by the 
waveform position. Further, on the DMG accesses will only work in this 
manner if made within a couple of clocks of the wave channel accessing 
wave RAM; if made at any other time, reads return $FF and writes have no
 effect.
</li></ul>
<ul><li> Triggering the wave channel on the DMG while it reads a sample 
byte will alter the first four bytes of wave RAM. If the channel was 
reading one of the first four bytes, the only first byte will be 
rewritten with the byte being read. If the channel was reading one of 
the later 12 bytes, the first FOUR bytes of wave RAM will be rewritten 
with the four aligned bytes that the read was from (bytes 4-7, 8-11, or 
12-15); for example if it were reading byte 9 when it was retriggered, 
the first four bytes would be rewritten with the contents of bytes 8-11.
 To avoid this corruption you should stop the wave by writing 0 then $80
 to NR30 before triggering it again. The game Duck Tales encounters this
 issue part way through most songs.
</li></ul>
<ul><li> "Zombie" mode: the volume can be manually altered while a 
channel is playing by writing to NRx2. Behavior depends on the old and 
new values of NRx2, and whether the envlope has stopped automatic 
updates. The CGB-02 and CGB-04 are the most consistent:
</li></ul>
<blockquote>
<ul><li> If the old envelope period was zero and the envelope is still 
doing automatic updates, volume is incremented by 1, otherwise if the 
envelope was in subtract mode, volume is incremented by 2.
</li><li> If the mode was changed (add to subtract or subtract to add), volume is set to 16-volume.
</li><li> Only the low 4 bits of volume are kept after the above operations.
</li></ul>
</blockquote>
<p>Other models behave differently, especially the DMG units which have 
crazy behavior in some cases. The only useful consistent behavior is 
using add mode with a period of zero in order to increment the volume by
 1. That is, write $V8 to NRx2 to set the initial volume to V before 
triggering the channel, then write $08 to NRx2 to increment the volume  
as the sound plays (repeat 15 times to decrement the volume by 1). This 
allows manual volume control on all units tested.
</p>
<ul><li> When all four channel DACs are off, the master volume units are
 disconnected from the sound output and the output level becomes 0. When
 any channel DAC is on, a high-pass filter capacitor is connected which 
slowly removes any DC component from the signal. The following code 
applied at 4194304 Hz implements these two behaviors for one of the DMG 
output channels (unoptimized floating point for clarity):
</li></ul>
<pre>static double capacitor = 0.0;

double high_pass( double in, bool dacs_enabled )
{
     double out = 0.0;
     if ( dacs_enabled )
     {
         out = in - capacitor;
         
         // capacitor slowly charges to 'in' via their difference
         capacitor = in - out * 0.999958; // use 0.998943 for MGB&amp;CGB
     }
     return out;
}
</pre>
<p>The charge factor can be calculated for any output sampling rate as 
0.999958^(4194304/rate). So if you were applying high_pass() at 44100 
Hz, you'd use a charge factor of 0.996.
</p>
<a name="Differences" id="Differences"></a><h1> <span class="mw-headline"> Differences </span></h1>
<p>This summarizes differences I've found among the models tested.
</p><p>Wave RAM access:
</p>
<ul><li> Possible only when it's doing wave RAM read (DMG-03, DMG-05, DMG-06, MGB-01).
</li><li> Can be accessed any time (CGB-02, CGB-04, CGB-05).
</li></ul>
<p>Wave channel re-trigger without disabling first (via NR30):
</p>
<ul><li> Re-writes first four bytes of wave RAM (DMG-03, DMG-05, DMG-06, MGB-01).
</li><li> Behaves normally (CGB-02, CGB-04, CGB-05).
</li></ul>
<p>Length counters and power off:
</p>
<ul><li> Preserved and can be written while off (DMG-03, DMG-05, DMG-06, MGB-01).
</li><li> Always zero at power on (CGB-02, CGB-04, CGB-05).
</li></ul>
<p>Length clocking on NRx4:
</p>
<ul><li> New length enable doesn't matter (CGB-02).
</li><li> Length must now be enabled (DMG-03, DMG-05, DMG-06, CGB-04, CGB-05, MGB-01).
</li></ul>
<p>Volume changes on NRx2 write:
</p>
<ul><li> $x0 to $xx and $x7 to $xx are very screwey (DMG-03, DMG-05, DMG-06, MGB-01).
</li><li> Behavior as described in obscure behavior (CGB-02, CGB-04).
</li><li> If mode isn't being changed, only $x8 to $xx affects volume. Mode change is also a bit different (CGB-05).
</li></ul>
<a name="To_Do" id="To_Do"></a><h1> <span class="mw-headline"> To Do </span></h1>
<ul><li> Using an envelope or sweep period of 0 then switching to another period also causes an extra clock in some cases.
</li></ul>
<ul><li> Frequency sweep has some really intricate behavior when rewriting sweep register
</li></ul>
<ul><li> Noise's frequency timer is more complex than described, 
resulting in trigger doing something more than simply reloading it. It 
may have multiple dividers to achieve the documented periods, with only 
some of them being reset on trigger.
</li></ul>
<ul><li> Behavior when triggering and writing to registers within a few 
clocks of frame sequencer events has yet to be determined. There will be
 lots of odd things uncovered for sure.
</li></ul>
<ul><li> Figure out exactly how noise LFSR is implemented with regard to mode changes.
</li></ul>
<ul><li> Document exact timing for DMG wave issues.
</li></ul>
<a name="Thanks" id="Thanks"></a><h1> <span class="mw-headline"> Thanks </span></h1>
<ul><li> Lord Nightmare for GBSOUND.txt, assistance, testing, GBs to test.
</li><li> Laguna for the gnuboy emulator.
</li><li> Ville Helin for WLA DX GB-Z80 assembler.
</li><li> sinamas for feedback about this document and my test ROMs.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 22/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key 134439-gbdevwiki-gbdevwiki_:pcache:idhash:36-0!1!0!!en!2!edit=0 and timestamp 20140217100129 -->
<div class="printfooter">
Retrieved from "<a href="http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware">http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware</a>"</div>
						<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware" title="View the content page [alt-shift-c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="http://gbdev.gg8.se/wiki/index.php?title=Talk:Gameboy_sound_hardware&amp;action=edit&amp;redlink=1" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="http://gbdev.gg8.se/wiki/index.php?title=Gameboy_sound_hardware&amp;action=edit" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="http://gbdev.gg8.se/wiki/index.php?title=Gameboy_sound_hardware&amp;action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="http://gbdev.gg8.se/wiki/index.php?title=Special:UserLogin&amp;returnto=Gameboy_sound_hardware" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://blog.gg8.se/images/gbdev-wiki-logo.jpg);" href="http://gbdev.gg8.se/wiki/articles/Main_Page" title="Visit the main page [alt-shift-z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-mainpage-description"><a href="http://gbdev.gg8.se/wiki/articles/Main_Page">Main Page</a></li>
				<li id="n-portal"><a href="http://gbdev.gg8.se/wiki/articles/GbdevWiki:Community_Portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-currentevents"><a href="http://gbdev.gg8.se/wiki/articles/GbdevWiki:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-recentchanges"><a href="http://gbdev.gg8.se/wiki/articles/Special:RecentChanges" title="The list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="http://gbdev.gg8.se/wiki/articles/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
				<li id="n-help"><a href="http://gbdev.gg8.se/wiki/articles/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/wiki/index.php" id="searchform"><div>
				<input name="title" value="Special:Search" type="hidden">
				<input id="searchInput" name="search" title="Search GbdevWiki [alt-shift-f]" accesskey="f" type="text">
				<input name="go" class="searchButton" id="searchGoButton" value="Go" title="Go to a page with this exact name if exists" type="submit">&nbsp;
				<input name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" type="submit">
			</div></form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://gbdev.gg8.se/wiki/articles/Special:WhatLinksHere/Gameboy_sound_hardware" title="List of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://gbdev.gg8.se/wiki/articles/Special:RecentChangesLinked/Gameboy_sound_hardware" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="http://gbdev.gg8.se/wiki/articles/Special:SpecialPages" title="List of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://gbdev.gg8.se/wiki/index.php?title=Gameboy_sound_hardware&amp;printable=yes" rel="alternate" title="Printable version of this page [alt-shift-p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="http://gbdev.gg8.se/wiki/index.php?title=Gameboy_sound_hardware&amp;oldid=128" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="Gameboy%20sound%20hardware%20-%20GbdevWiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki"></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 8 May 2008, at 23:10.</li>
					<li id="viewcount">This page has been accessed 7,193 times.</li>
					<li id="privacy"><a href="http://gbdev.gg8.se/wiki/articles/GbdevWiki:Privacy_policy" title="GbdevWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="http://gbdev.gg8.se/wiki/articles/GbdevWiki:About" title="GbdevWiki:About">About GbdevWiki</a></li>
					<li id="disclaimer"><a href="http://gbdev.gg8.se/wiki/articles/GbdevWiki:General_disclaimer" title="GbdevWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.278 secs. -->
</body></html>